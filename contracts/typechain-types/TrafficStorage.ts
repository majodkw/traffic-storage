/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TrafficStorageInterface extends Interface {
  getFunction(nameOrSignature: "getRecord" | "storeRecord"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RecordStored"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRecord",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeRecord",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeRecord",
    data: BytesLike
  ): Result;
}

export namespace RecordStoredEvent {
  export type InputTuple = [
    trafficLightId: string,
    timestamp: BigNumberish,
    dataType: BigNumberish,
    cid: string
  ];
  export type OutputTuple = [
    trafficLightId: string,
    timestamp: bigint,
    dataType: bigint,
    cid: string
  ];
  export interface OutputObject {
    trafficLightId: string;
    timestamp: bigint;
    dataType: bigint;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrafficStorage extends BaseContract {
  connect(runner?: ContractRunner | null): TrafficStorage;
  waitForDeployment(): Promise<this>;

  interface: TrafficStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRecord: TypedContractMethod<
    [trafficLightId: string, timestamp: BigNumberish, dataType: BigNumberish],
    [string],
    "view"
  >;

  storeRecord: TypedContractMethod<
    [
      trafficLightId: string,
      timestamp: BigNumberish,
      dataType: BigNumberish,
      cid: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRecord"
  ): TypedContractMethod<
    [trafficLightId: string, timestamp: BigNumberish, dataType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeRecord"
  ): TypedContractMethod<
    [
      trafficLightId: string,
      timestamp: BigNumberish,
      dataType: BigNumberish,
      cid: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RecordStored"
  ): TypedContractEvent<
    RecordStoredEvent.InputTuple,
    RecordStoredEvent.OutputTuple,
    RecordStoredEvent.OutputObject
  >;

  filters: {
    "RecordStored(string,uint256,uint8,string)": TypedContractEvent<
      RecordStoredEvent.InputTuple,
      RecordStoredEvent.OutputTuple,
      RecordStoredEvent.OutputObject
    >;
    RecordStored: TypedContractEvent<
      RecordStoredEvent.InputTuple,
      RecordStoredEvent.OutputTuple,
      RecordStoredEvent.OutputObject
    >;
  };
}
